#! /bin/bash

CORE_URL='https://raw.githubusercontent.com/Sunmxt/AutoDnsmasq/master/list2dnsmasq'
ADNS_CONF=/etc/auto_dnsmasq.conf
ADNS_SYSTEMD=/usr/lib/systemd/system
ADNS_SYSTEMD_SVR=auto-dnsmasq.service
ADNS_SYSTEMD_TIMER=auto-dnsmasq.timer
ADNS_INSTALL_DIR=/usr/sbin
ADNS_CORE_NAME=auto-dnsmasq
ADNS_CONVERT_CORE_NAME=list2dnsmasq

show_help() {
    echo -e "AutoDnsmasq Commander"
    echo -e ""
    echo -e "Usage: $0 <command>"
    echo -e ""
    echo -e "command:"
    echo -e "   install                             Install services."
    echo -e "   uninstall                           Remove AutoDnsmasq services."
    echo -e ""
    echo -e "   set-config          <file>          Set dnsmasq configure file."
    echo -e "   set-rules-id        <id>            Set rules id."
    echo -e "   set-ipset           <ipset>         Set target ipset."
    echo -e "   set-dns             <addr>          Set upstream DNS."
    echo -e "   set-dns-port        <port>          Set upstream DNS port"
    echo -e "   set-service-name    <name>          Set related service name ( for reloading rules )."
    echo -e "   update                              Update rules."
    echo -e "   enable                              Enable services"
    echo -e "   disable                             Disable services"
    echo -e "   status                              Show configure"
}

check_timer_plan() {
    __result_to=$1
    if [ -d /usr/lib/systemd/system ]; then
        eval $__result_to=systemd
        return 0
    elif [ "$(whereis cron)" != "" ]; then
        eval $__result_to=cron
        return 0
    else
        return 1
    fi
}

check_exist() {
    __result_to=$1
    while [ $1 ]
    do
        shift 1
        __path=$(whereis $1 | cut -d ':' -f 2 -) 
        __path=${__path-}
        if [ "$__path" != "" ]; then
            eval $__result_to=$1
            return 0
        fi
    done
    
    return 1
}

check_dependencies() {
    if [ "$(whoami)" != "root" ]; then
        echo -e "Please run as root."
        return 2
    fi

    if [ $REQUIRE_DOWNLOAD ]; then
        check_exist __result wget curl || ( echo "Download tools missing." >&2 ; return 2)
        _do_download=$__result
    fi

    if [ $REQUIRE_LIST2DNSMASQ ]; then
        check_exist __result $ADNS_CONVERT_CORE_NAME || ( echo '$ADNS_CONVERT_CORE_NAME missing. Reinstall AutoDnsmasq please.' ; return 2)
    fi

    if [ $REQUIRE_TIMER_PLANNER ]; then
        check_timer_plan __result || ( echo 'Unknown init daemon.' ; return 2)
        _timer_planner=$__result
    fi

    check_exist __result dnsmasq || {
         echo -e "Dnsmasq missing." >&2
         return 2
    }

    check_exist __result sed || {
        echo "sed missing..." >&2
        return 2
    }
}

get_resource() {
    _save_to=$1
    _from=$2
    case $_do_download in 
        wget)
            wget "$_from" -O "$_save_to" || return $?
        ;;

        curl)
            curl --url "$_from" -o "$_save_to" || return $?
        ;;
    esac
}

adns_check_install() {
    [ -e "$ADNS_INSTALL_DIR/$ADNS_CORE_NAME" ] && return 0
    return 1
}

adns_install() {
    if adns_check_install; then
        echo -e "AutoDnsmasq already installed."
        return 0
    fi
    
    REQUIRE_DOWNLOAD=1
    check_dependencies || return $?
    
    _core_tmp=/tmp/list2dnsmasq
    get_resource "$_core_tmp" "$CORE_URL" || {
        echo -e "Cannot get list2dnsmasq." >&2
        return 2
    }
    chmod 755 $_core_tmp

    cp -f "$0" "$ADNS_INSTALL_DIR/$ADNS_CORE_NAME" || {
        echo -e "Error occurs when install $ADNS_INSTALL_DIR/$ADNS_CORE_NAME"
        return 3
    }
    chmod 755 "$ADNS_INSTALL_DIR/$ADNS_CORE_NAME"
    
    mv -f $_core_tmp $ADNS_INSTALL_DIR/$ADNS_CONVERT_CORE_NAME || {
        echo -e "Error occurs when install $ADNS_CORE_NAME/$ADNS_CONVERT_CORE_NAME"
        return 3
    }
    
    echo "Ininitialize..."
    $ADNS_CORE_NAME status
}

adns_create_setting() {
    echo -e "# --------------------------------------- #"
    echo -e "#    Configure for AutoDnsmasq"
    echo -e "# --------------------------------------- #"
    echo -e ""
    echo -e "dnsmasq_config=$SETTING_TARGET_CONF"
    echo -e "ipset=$SETTING_IPSET"
    echo -e "dns=$SETTING_UPSTREAM_DNS"
    echo -e "dns_port=$SETTING_UPSTREAM_PORT"
    echo -e "rules=$SETTING_RULES_ID"
    echo -e "service_name=$SETTING_SERVICE_NAME"
}

adns_get_with_default() {
    _name=$2
    _result_to=$3
    _default=$4

    _got=$(sed -En '/#.*/d;s/'"$_name"'\s*=\s*(.*)/\1/p' $1 | head -n 1)
    if ! [ $_got ]; then
        eval $_result_to=$_default
        return 1
    else
        eval $_result_to=$_got
    fi
}

adns_load_setting() {
    if ! [ -e $ADNS_CONF ]; then
        echo -e "Configure file not found. creating..." >&2
        SETTING_TARGET_CONF=/etc/dnsmasq.conf
        SETTING_IPSET=auto_dnsmasq_gfwset
        SETTING_UPSTREAM_DNS=8.8.8.8
        SETTING_UPSTREAM_PORT=53
        SETTING_RULES_ID=auto_dnsmasq_gfwlist
        SETTING_SERVICE_NAME=dnsmasq
        adns_create_setting > $ADNS_CONF || ( echo Failed. >&2 ; return 3)
        chmod 644 $ADNS_CONF
        return 1
    fi

    adns_get_with_default "$ADNS_CONF" dnsmasq_config SETTING_TARGET_CONF /etc/dnsmasq.conf || echo "dnsmasq_config=$SETTING_TARGET_CONF" >> "$ADNS_CONF"
    adns_get_with_default "$ADNS_CONF" ipset SETTING_IPSET || echo "ipset=$SETTING_IPSET" >> "$ADNS_CONF"
    adns_get_with_default "$ADNS_CONF" dns SETTING_UPSTREAM_DNS 8.8.8.8 || echo "dns=$SETTING_UPSTREAM_DNS" >> "$ADNS_CONF"
    adns_get_with_default "$ADNS_CONF" dns_port SETTING_UPSTREAM_PORT || echo "dns_port=$SETTING_UPSTREAM_PORT" >> "$ADNS_CONF"
    adns_get_with_default "$ADNS_CONF" rules SETTING_RULES_ID auto_dnsmasq_gfwlist || echo "rules=$SETTING_RULES_ID" >> "$ADNS_CONF"
    adns_get_with_default "$ADNS_CONF" service_name SETTING_SERVICE_NAME dnsmasq || echo "service_name=$SETTING_SERVICE_NAME" >> "$ADNS_CONF"
}

adns_status() {
    check_dependencies || return $?

    adns_load_setting 
    declare -i load_setting_retval=$?
    if [ $load_setting_retval -ge 2 ]; then
        echo -e "Error occurs when loading setting." >&2
        return 3
    fi

    echo "Dnsmasq configure: $SETTING_TARGET_CONF"
    echo "IP set: $SETTING_IPSET"
    echo "Upstream DNS: $SETTING_UPSTREAM_DNS:$SETTING_UPSTREAM_PORT"
    echo "Rules ID: $SETTING_RULES_ID"
    echo "Dnsmasq service name: $SETTING_SERVICE_NAME"
    echo ""
    
    [ $load_setting_retval == 1 ] && { 
        echo -e "Setting initialized."
        echo -e "run:"
        echo -e "   $ADNS_CORE_NAME enable"
        echo -e "to enable services."
        echo -e ""
        echo -e "run:"
        echo -e "   $ADNS_CORE_NAME help"
        echo -e "to get help."
    } >&2
}

adns_cat_systemd_service() {
    echo '[Unit]'
    echo 'Description=Update GFWList to dnsmasq rules'
    echo 'Wants=network.target'
    echo 'Before=network.target'
    echo ''
    echo '[Service]'
    echo 'Type=simple'
    echo "ExecStart=$ADNS_INSTALL_DIR/$ADNS_CORE_NAME update"
    echo ''
    echo '[Install]'
    echo 'WantedBy=multi-user.target'
}

adns_cat_systemd_timer() {
    echo '[Unit]'
    echo 'Description=Update GFWList to dnsmasq rules.'
    echo ''
    echo '[Timer]'
    echo 'OnCalendar=daily'
    echo 'AccuracySec=6h'
    echo 'Persistent=true'
    echo ''
    echo '[Install]'
    echo 'WantedBy=timers.target'
}

adns_setup_systemd_services() {
    if ! [ -e "$ADNS_SYSTEMD/$ADNS_SYSTEMD_SVR" ]; then
        adns_cat_systemd_service > "$ADNS_SYSTEMD/$ADNS_SYSTEMD_SVR"
    fi

    if ! [ -e "$ADNS_SYSTEMD/$ADNS_SYSTEMD_TIMER" ]; then
        adns_cat_systemd_timer > "$ADNS_SYSTEMD/$ADNS_SYSTEMD_TIMER"
    fi
}

adns_setup_services() {
    case $_timer_planner in
        systemd)
            echo "systemd as init daemon..." >&2
            adns_setup_systemd_services || {
                echo 'Failed.' >&2
                return 5
            }
        ;;
        *)
            echo -e "AutoDnsmasq support $_timer_planner later." >&2
            return 4
        ;;
    esac

}

adns_enable() { 
    REQUIRE_TIMER_PLANNER=1

    check_dependencies || return $? 

    adns_load_setting || {
        echo -e "Error occurs while loading setting."
        return 3
    } >&2

    adns_setup_services || return $?

    case $_timer_planner in
        systemd)
            systemctl enable $ADNS_SYSTEMD_TIMER || return $?
        ;;

        *)
            return 6
        ;;
    esac
}

adns_disable() {
    REQUIRE_TIMER_PLANNER=1

    check_dependencies || return $?
    case $_timer_planner in
        systemd)
            systemctl disable $ADNS_SYSTEMD_TIMER || return $?
        ;;

        *)
            echo -e "AutoDnsmasq support $_timer_policy later." >&2
            return 6
    esac
}

adns_dnsmasq_running_systemd() {
    _state=$(systemctl status $SETTING_SERVICE_NAME | sed -En 's/\s*Active:\s*.*\((.*)\).*/\1/p')
    if [ "$_state" != "running" ]; then
        return 1
    fi
}

adns_update() {
    REQUIRE_LIST2DNSMASQ=1
    REQUIRE_TIMER_PLANNER=1

    check_dependencies || return $?
    adns_load_setting || {
        echo -e "Error occurs while loading setting."
        return 3
    }

    if [ $SETTING_IPSET ]; then
        _options_ipset='--ipset '"$SETTING_IPSET"
    else
        _options_ipset=
    fi

    if [ $SETTING_UPSTREAM_PORT ]; then
        _options_dns='-r '"$SETTING_UPSTREAM_DNS:$SETTING_UPSTREAM_PORT"
    else
        _options_dns=-r $SETTING_UPSTREAM_DNS 
    fi

    $ADNS_CONVERT_CORE_NAME $_options_dns --rules-id $SETTING_RULES_ID $_options_ipset -D "$SETTING_TARGET_CONF" || return $?
    case $_timer_planner in
        systemd)
            if adns_dnsmasq_running_systemd; then
                echo "Restart dnsmasq... " >&2
                systemctl restart $SETTING_SERVICE_NAME || return $?
            fi
        ;;

        
        *)
            echo -e "AutoDnsmasq support $_timer_policy later." >&2
            return 6
    esac
}

adns_uninstall() {
    if ! adns_check_install; then
        echo -e "AutoDnsmasq is not installed." >&2
        return 1
    fi

    check_dependencies || return $?
    adns_load_setting || {
        echo -e "Error occurs when loading setting." >&2
        return 3
    }
    

    $ADNS_CORE_NAME disable 
    $ADNS_CONVERT_CORE_NAME --rules-id $SETTING_RULES_ID -D "$SETTING_TARGET_CONF" --delete
    rm -f "$ADNS_INSTALL_DIR/$ADNS_CORE_NAME" 
    rm -f "$ADNS_INSTALL_DIR/$ADNS_CONVERT_CORE_NAME" 
    rm -f "$ADNS_SYSTEMD/$ADNS_SYSTEMD_SVR"
    rm -f "$ADNS_SYSTEMD/$ADNS_SYSTEMD_TIMER"
    mv -f "$ADNS_CONF" "$ADNS_CONF.bak"

    echo -e "Finished." >&2
}

adns_set_configure_value() {
    _name=$1
    _value=$2

    mv -f "$ADNS_CONF" "$ADNS_CONF.bak"
    sed -En '/^'$_name'=.*/d;p' "$ADNS_CONF.bak" > "$ADNS_CONF"
    echo $_name=$_value >> "$ADNS_CONF"
}

adns_check_and_set_configure() {
    if ! [ $2 ]; then
        echo -e "Value missing." >&2
        return 8
    fi

    adns_set_configure_value "$1" "$2"
}

case $1 in
    install)
        shift 1
        adns_install $*
        exit $?
    ;;

    uninstall)
        shift 1
        adns_uninstall $*
        exit $?
    ;;
    
    set-config)
        shift 1
        adns_check_and_set_configure dnsmasq_config $*
        exit $?
    ;;
    
    set-rules-id)
        shift 1
        adns_check_and_set_configure rules $*
        exit $?
    ;;

    set-ipset)
        shift 1
        adns_check_and_set_configure ipset $*
        exit $?
    ;;

    set-dns)
        shift 1
        adns_check_and_set_configure dns $*
        exit $?
    ;;

    set-dns-port)
        shift 1
        adns_check_and_set_configure dns_port $*
        exit $?
    ;;

    set-service-name)
        shift 1
        adns_check_and_set_configure service_name $*
        exit $?
    ;;

    update)
        shift 1
        adns_update $*
        exit $?
    ;;

    disable)
        shift 1
        adns_disable $*
        exit $?
    ;;

    enable)
        shift 1
        adns_enable $*
        exit $?
    ;;
    
    status)
        shift 1
        adns_status $*
        exit $?
    ;;


    help)
        show_help
        exit 0
    ;;

    *)
        show_help
        exit 0
    ;;
esac
