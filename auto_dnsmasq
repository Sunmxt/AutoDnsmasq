#! /usr/bin/bash


# ----------------------------------------- #
#   Options                                 #
# ----------------------------------------- #

GFWLIST_URL="https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt"

show_help() {
    echo -e "Tool for managing dnsmasq rules"
    echo -e "Usage: $0 [options]\n"
    
    echo -e "\nManage:" 
    echo -e "           --rules-id      <id>                target dnsmasq rules id"
    echo -e "       -D  --configure     <configure file>    update dnsmasq configure."
    echo -e "       -l  --list-rules                        List AutoDnsmasq Rules"

    echo -e "\nOutput:"
    echo -e "       -o  --output            <file>          save to <file>"
    echo -e "           --domain-list                       generate domain list only ( while dnsmasq rules will be generated as default )"
#    echo -e "           --ip-list                           generate ip list through targeted DNS server. "
#    echo -e "           --ip-set-append     <IPSet>         resolve domains through targeted DNS server and append to ipset"
#    echo -e "       -I  --ip-set            <IPSet>         resolve domains through targeted DNS server and update ipset"
    echo -e "       -i  --ipset-conf        <IPSet>         Specifed IPSet for rules" 

    echo -e "\nDNS Options:"
    echo -e "       -r  --target-dns    <address:port>|<address>"
    echo -e "                                               specify target DNS Server"
    echo -e "           default: DNS Server in resolv.conf"
    
    echo -e "\nOthers:"
    echo -e "       -g  --from-url  <url>                   get GFWList from <url>"
    echo -e "           default: $GFWLIST_URL"
    echo -e "       -h  --help                              show help message"
}


check_exist() {
    __result_to=$1
    while [ $1 ]
    do
        shift 1
        __path=$(whereis $1 | cut -d ':' -f 2 -) 
        __path=${__path-}
        if [ "$__path" != "" ]; then
            eval $__result_to=$1
            return 0
        fi
    done
    
    return 1
}

check_dependencies() {
    if [ $RULES_NEED_UPDATE ]; then
        echo -ne "checking download tools... " >&2
        check_exist __result wget curl || ( echo -e "no" >&2; return 2)
        echo -e "$__result" >&2
        declare -g _do_download=$__result

        echo -ne "checking base64... " >&2
        check_exist __result base64 || ( echo -e "no" >&2; return 2)
        echo -e "yes" >&2
    
        echo -ne "checking grep... " >&2
        check_exist __result grep || ( echo -e "no" >&2; return 2)
        echo -e "yes">&2

        echo -ne "checking sort... " >&2
        check_exist __result sort || ( echo -e "no" >&2; return 2)
        echo -e "yes">&2

        echo -ne "checking uniq... " >&2
        check_exist __result uniq || ( echo -e "no" >&2; return 2)
        echo -e "yes">&2
    fi

    echo -ne "checking sed... " >&2
    check_exist __result sed || ( echo -e "no" >&2; return 2)
    echo -e "yes" >&2
    
    if [ $DOMAINS_NEED_RESOLVE ]; then
        echo -ne "checking domain resolving tools... " >&2
        check_exist __result nslookup dig || ( echo -e "no" >&2; return 2)
        echo -e "$__result" >&2
        declare -g _do_dns_resolve=$__result
    fi

}

list_rules_pack_list() {
    _conf_file=$1

    echo -e "Available rules pack:"
    # find beginning tag and mark --> append line to hold space according the marks
    # --> finally swap the spaces, remove marks and print
    sed -En 's/#\s*!AutoDnsmasqBegin!(.+?)!/##\1/g;/\#\#/H;${x;s/#//g;p}' "$_conf_file"
}

list_dnsmasq_rule_pack() {
    _conf_file=$2
    _rule_id=$1
    
    sed -En '/#\s*!AutoDnsmasqBegin!'$_rule_id'!/,/#\s*!AutoDnsmasqEnd!'$_rule_id'!/{//!p}' "$_conf_file" 
}

auto_dnsmasq_rule_pack_update() {
    _conf_file=$1
    _rules_file=$2
    _rule_id=$3

    sed_addr_bg='/#\s*!AutoDnsmasqBegin!'$_rule_id'!/'
    sed_addr_end='/#\s*!AutoDnsmasqEnd!'$_rule_id'!/'

    _tmp_conf=/tmp/auto_dnsmasq_conf_$RANDOM
    #check whether the pack exists
    _test=$(sed -En "$sed_addr_bg"','"$sed_addr_end"'{//!d;p}' "$_conf_file")
    if [ "$_test" == "" ]; then
        cat $_conf_file > $_tmp_conf
        echo -e "# !AutoDnsmasqBegin!$_rule_id!" >> $_tmp_conf
        cat $_rules_file >> $_tmp_conf
        echo -e "# !AutoDnsmasqEnd!$_rule_id!" >> $_tmp_conf
    else
        sed -En "$sed_addr_bg"','"$sed_addr_end"'{//!d};p;'"$sed_addr_bg"'r'"$_rules_file" "$_conf_file" >> "$_tmp_conf"
    fi
    mv -f $_tmp_conf "$_conf_file"
}
 
get_gfw_list() {

    _temp_file=/tmp/gfw_dnsmasq_$RANDOM
    declare -g _gfwlist_dec=/tmp/gfw_dnsmasq_dec_$RANDOM

    case $_do_download in
        wget)
            wget $GFWLIST_URL -O $_temp_file || return 3
        ;;

        curl)
            curl --url $GFWLIST_URL -o $_temp_file -s || return 3
        ;;
    esac
    
    echo -ne "Base64 decoding... " >&2
    base64 -d $_temp_file > $_gfwlist_dec
    echo -e "ok" >&2

    rm $_temp_file
    unset _do_download
}

do_gen_domains_list() {
    declare -g _domain_list_tmp=/tmp/gfw_dnsmasq_domains_$RANDOM
    
    # cut '[Autoproxy]' header --> remove exceptions, regexp rules and null lines --> match domains --> cut '.' at the front of lines --> remove duplicated lines
    cat $_gfwlist_dec | sed -n '2,$p' | grep -E '((!|@@).*|^/.*/$)' -v | grep -E '|*\.?[[:alnum:]_-]+(\.[[:alnum:]_-]+)+|*' -o | sed 's/^\.//g' | sort | uniq > $_domain_list_tmp
}

do_gen_dnsmasq_rules() {
    _domains=$1
    
    sed -E "s/(.+)/server=\/\1\/$DNS_SERVER\#$DNS_PORT/g" "$_domains"
    if [ $RULES_IPSET ]; then
        sed -E "s/(.+)/ipset=\/\1\/$RULES_IPSET/g" "$_domains"
    fi
}

gen_dnsmasq_main() {
    if ! check_dependencies; then
        echo -e "Dependencies missing."  >&2;
        return 2
    fi
    echo -e "Dependencies check finished..\n" >&2

    if [ $LIST_RULES_PACK ]; then
        if [ $RULES_ID ]; then
            list_dnsmasq_rule_pack "$RULES_ID" "$DNSMASQ_CONFIG"
        else
            list_rules_pack_list "$DNSMASQ_CONFIG"
        fi
        return $?
    fi

    echo -e "Get GFWList: $GFWLIST_URL" >&2
    echo -e "----------------------------------------------------" >&2
    if ! get_gfw_list >&2 ; then
        echo -e "Unable to get GFWList" >&2;
        return 3
    fi
    echo -e "----------------------------------------------------" >&2
    
    echo -e "Generating domains list..." >&2
    do_gen_domains_list || return 4
    if [ $GEN_DOMAIN_LIST ]; then
        if [ $TO_FILE ]; then
            echo -e "Saving to: $TO_FILE"
            cat $_domain_list_tmp > $TO_FILE
        else
            cat $_domain_list_tmp
        fi
        return 0
    fi

    echo -e "Generating dnsmasq rules..." >&2
    _temp_rules_file=/tmp/auto_dnsmasq_rules_$RANDOM
    do_gen_dnsmasq_rules "$_domain_list_tmp" > "$_temp_rules_file" || return 5
    rm $_domain_list_tmp
    unset _domain_list_tmp
    if [ $TO_FILE ]; then
        echo -e "Saving to: $TO_FILE" >&2
        mv "$_temp_rules_file" "$TO_FILE"
        return 0
    fi

    if [ $DNSMASQ_CONFIG ]; then
        echo -e "Update to configure: $DNSMASQ_CONFIG ..." >&2
        auto_dnsmasq_rule_pack_update "$DNSMASQ_CONFIG" "$_temp_rules_file" "$RULES_ID"
    else
        cat $_temp_rules_file
    fi
    rm $_temp_rules_file

    echo -e "Finished." >&2
}

check_args() {
    if ! [ $LIST_RULES_PACK ]; then
        declare -g RULES_NEED_UPDATE=1
        if ! [ -e $DNSMASQ_CONFIG ]; then
            echo -e "Not found: $DNSMASQ_CONFIG"
            return 6
        fi
    fi
    
    # Default DNS Port 53
    if [ $RULES_NEED_UPDATE ]; then
        if ! [ $GEN_DOMAIN_LIST ]; then
            if ! [ $RULES_ID ] && [ $DNSMASQ_CONFIG ]; then
                echo -e "No specified rule pack id."
                return 1
            fi
        fi

        if ! [ $DNS_SERVER ]; then
            echo -e "No target DNS Server (see --target-dns)." >&2
            return 1
        elif ! [ $DNS_PORT ]; then
           echo -e "Use default DNS Port: 53." >&2
           declare -g DNS_PORT=53
        fi
    fi
}

echo -e "Dnsmasq and ipset rules manage helper.\n" >&2

while [ "$1" != "" ]
do
    case $1 in
        "-o")
            TO_FILE_PARSED=1
            WAIT_PARAMS=1
        ;;
        "--output")
            TO_FILE_PARSED=1
            WAIT_PARAMS=1
        ;;

        "-h")
            show_help
            exit 0
        ;;
        "--help")
            show_help
            exit 0
        ;;

        "-g")
            FROM_URL_PARSED=1
            WAIT_PARAMS=1
        ;;
        "--from-url")
            FROM_URL_PARSED=1
            WAIT_PARAMS=1
        ;;

        "-D")
            TARGET_CONFIG_PARSED=1
            WAIT_PARAMS=1
        ;;
        "--configure")
            TARGET_CONFIG_PARSED=1
            WAIT_PARAMS=1
        ;;
        
        #"--ip-set")
        #    IP_SET_UPDATE=1
        #    DOMAINS_NEED_RESOLVE=1
        #;;
        #"-I")
        #    IP_SET_UPDATE=1
        #    DOMAINS_NEED_RESOLVE=1
        #;;
        #"--ip-set-append")
        #    IP_SET_APPEND=1
        #    DOMAINS_NEED_RESOLVE=1
        #;;

        "--target-dns")
            TARGET_DNS_PARSED=1
            WAIT_PARAMS=1
        ;;
        "-r")
            TARGET_DNS_PARSED=1
            WAIT_PARAMS=1
        ;;
        
        "--domain-list")
            GEN_DOMAIN_LIST=1
        ;;
        "--ipset-conf")
            RULES_IPSET_PARSED=1
            WAIT_PARAMS=1
        ;;
        "-i")
            RULES_IPSET_PARSED=1
            WAIT_PARAMS=1
        ;;
        
        "--rules-id")
            RULES_ID_PARSED=1
            WAIT_PARAMS=1
        ;;

        "-l")
            LIST_RULES_PACK=1
        ;;
        "--list")
            LIST_RULES_PACK=1
        ;;

        *)
            if [ $WAIT_PARAMS ]; then
                if [ $TO_FILE_PARSED ]; then
                    TO_FILE=$1
                    unset TO_FILE_PARSED
                elif [ $FROM_URL_PARSED ]; then
                    GFWLIST_URL=$1
                    unset FROM_URL_PARSED
                elif [ $TARGET_DNS_PARSED ]; then
                    DNS_SERVER=$(echo $1 | cut -d ':' -f 1 -)
                    DNS_PORT=$(echo $1 | cut -sd ':' -f 2 -)
                    unset TARGET_DNS_PARSED
                elif [ $TARGET_CONFIG_PARSED ]; then
                    DNSMASQ_CONFIG=$1
                    unset TARGET_CONFIG_PARSED
                elif [ $RULES_ID_PARSED ]; then
                    RULES_ID=$1
                    unset RULES_ID_PARSED
                elif [ $RULES_IPSET_PARSED ]; then
                    RULES_IPSET=$1
                    unset RULES_IPSET_PARSED
                fi
                unset WAIT_PARAMS
            else
                echo -e "Unknown option: $1" >&2
                exit 1
            fi
        ;;
    esac
    shift 1
done

check_args || exit $?
gen_dnsmasq_main
